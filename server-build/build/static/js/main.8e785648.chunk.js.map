{"version":3,"sources":["ColorModeSwitcher.js","components/Question/index.jsx","scripts/api.js","pages/Main/index.jsx","pages/New/index.jsx","pages/Question/comment.jsx","pages/Question/index.jsx","App.jsx","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","style","position","top","right","icon","Question","p","shadow","borderWidth","borderRadius","width","href","id","subject","mt","noOfLines","question","fetch","require","post","path","data","a","method","headers","body","JSON","stringify","q","json","get","getQuestions","getQuestionDetails","qId","newQuestion","newComment","Main","state","questions","this","setState","console","log","map","_id","React","Component","New","firstName","handleChange","bind","handleSubmit","event","target","value","preventDefault","className","onSubmit","height","placeholder","type","commentAuthor","onChange","comment","colorScheme","Comment","maxW","overflow","fontWeight","as","lineHeight","isTruncated","name","postid","comments","URLSearchParams","location","search","window","reload","spacing","App","theme","exact","component","Questions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e785648.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n\tconst { toggleColorMode } = useColorMode();\n\tconst text = useColorModeValue('dark', 'light');\n\tconst SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\tconst style = {\n\t\tposition: 'fixed',\n\t\ttop: 10,\n\t\tright: 20,\n\t};\n\treturn (\n\t\t<IconButton\n\t\t\tsize=\"md\"\n\t\t\tfontSize=\"lg\"\n\t\t\taria-label={`Switch to ${text} mode`}\n\t\t\tvariant=\"ghost\"\n\t\t\tcolor=\"current\"\n\t\t\tmarginLeft=\"2\"\n\t\t\tonClick={toggleColorMode}\n\t\t\tstyle={style}\n\t\t\ticon={<SwitchIcon />}\n\t\t\t{...props}\n\t\t/>\n\t);\n};\n","import React from 'react';\r\nimport { Box, Text, Center, Heading } from '@chakra-ui/react';\r\n\r\nfunction Question(props) {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Center>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tp={5}\r\n\t\t\t\t\tshadow=\"md\"\r\n\t\t\t\t\tborderWidth=\"1px\"\r\n\t\t\t\t\tborderRadius=\"lg\"\r\n\t\t\t\t\twidth=\"25em\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<a href={`/question?q=${props.id}`}>\r\n\t\t\t\t\t\t<Heading fontSize=\"xl\">{props.subject}</Heading>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<Text mt={4} noOfLines={2}>\r\n\t\t\t\t\t\t{props.question}\r\n\t\t\t\t\t</Text>\r\n\t\t\t\t</Box>\r\n\t\t\t</Center>\r\n\t\t\t<br />\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Question;\r\n","const fetch = require('node-fetch');\r\n\r\nasync function post(path, data) {\r\n\tconst q = await fetch(`http://localhost:8000/api/${path}`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t},\r\n\t\tbody: JSON.stringify(data),\r\n\t});\r\n\treturn await q.json();\r\n}\r\nasync function get(path) {\r\n\tconst q = await fetch(`http://localhost:8000/api/${path}`);\r\n\treturn await q.json();\r\n}\r\n\r\nexport async function getQuestions() {\r\n\treturn await get('getQuestions');\r\n}\r\nexport async function getQuestionDetails(qId) {\r\n\treturn await get(`details/${qId}`);\r\n}\r\nexport async function newQuestion(data) {\r\n\treturn await post('new', data);\r\n}\r\nexport async function newComment(data) {\r\n\treturn await post('comment', data);\r\n}\r\n","import React from 'react';\r\nimport Question from '../../components/Question';\r\nimport { Text } from '@chakra-ui/react';\r\nimport { getQuestions } from '../../scripts/api';\r\n\r\n// function Main() {\r\n// \tconst [questions, setQuestions] = useState(null);\r\n\r\n// \tuseEffect(() => {\r\n// \t\tconst getQuestionList = async () => {\r\n// \t\t\tconst { q } = await getQuestions();\r\n// \t\t\tconsole.log(q);\r\n// \t\t\tsetQuestions(q);\r\n// \t\t};\r\n// \t\tgetQuestionList();\r\n// \t}, []);\r\n\r\n// \treturn (\r\n// \t\t<>\r\n// \t\t\t{questions.map(q => (\r\n// \t\t\t\t<Question subject={q.subject} question={q.question} />\r\n// \t\t\t))}\r\n// \t\t</>\r\n// \t);\r\n// }\r\n\r\nclass Main extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tquestions: [],\r\n\t\t};\r\n\t}\r\n\tasync componentDidMount() {\r\n\t\tconst { questions } = await getQuestions();\r\n\t\tthis.setState({\r\n\t\t\tquestions,\r\n\t\t});\r\n\t\tconsole.log(this.state);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<Text fontSize=\"3xl\">Recent questions</Text>\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\t\t\t\t{this.state.questions.map(q => (\r\n\t\t\t\t\t<Question\r\n\t\t\t\t\t\tkey={q._id}\r\n\t\t\t\t\t\tsubject={q.subject}\r\n\t\t\t\t\t\tquestion={q.question}\r\n\t\t\t\t\t\tid={q._id}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Textarea, Input, Text, Button } from '@chakra-ui/react';\r\nimport { newQuestion } from '../../scripts/api';\r\n\r\nclass New extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tfirstName: '',\r\n\t\t\tsubject: '',\r\n\t\t\tquestion: '',\r\n\t\t};\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t}\r\n\r\n\thandleChange(event) {\r\n\t\tswitch (event.target.id) {\r\n\t\t\tcase 'fname':\r\n\t\t\t\tthis.setState({ firstName: event.target.value });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'subject':\r\n\t\t\t\tthis.setState({ subject: event.target.value });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'question':\r\n\t\t\t\tthis.setState({ question: event.target.value });\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tasync handleSubmit(event) {\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log(this.state);\r\n\t\tawait newQuestion(this.state);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Text fontSize=\"4xl\">Add a question</Text>\r\n\t\t\t\t<br />\r\n\t\t\t\t<form className=\"addQuestion\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<Text fontSize=\"2xl\">Name:</Text>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\twidth=\"10em\"\r\n\t\t\t\t\t\t\theight=\"2em\"\r\n\t\t\t\t\t\t\tplaceholder=\"Name (optional)\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tid=\"fname\"\r\n\t\t\t\t\t\t\tvalue={this.state.commentAuthor}\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<Text fontSize=\"2xl\">Subject:</Text>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\twidth=\"10em\"\r\n\t\t\t\t\t\t\theight=\"2em\"\r\n\t\t\t\t\t\t\tplaceholder=\"ex: math\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tid=\"subject\"\r\n\t\t\t\t\t\t\tvalue={this.state.subject}\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<Text fontSize=\"2xl\">Question:</Text>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<Textarea\r\n\t\t\t\t\t\t\twidth=\"30em\"\r\n\t\t\t\t\t\t\tplaceholder=\"Question to add\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tid=\"question\"\r\n\t\t\t\t\t\t\tvalue={this.state.comment}\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<Button type=\"submit\" colorScheme=\"blue\">\r\n\t\t\t\t\t\tAdd question\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default New;\r\n","import React from 'react';\r\nimport { Text, Box, Center } from '@chakra-ui/react';\r\n\r\nfunction Comment(props) {\r\n\treturn (\r\n\t\t<Center>\r\n\t\t\t<Box\r\n\t\t\t\tmaxW=\"sm\"\r\n\t\t\t\tborderWidth=\"1px\"\r\n\t\t\t\tborderRadius=\"lg\"\r\n\t\t\t\toverflow=\"hidden\"\r\n\t\t\t\twidth=\"25em\"\r\n\t\t\t>\r\n\t\t\t\t<Box p=\"6\">\r\n\t\t\t\t\t<Box\r\n\t\t\t\t\t\tmt=\"1\"\r\n\t\t\t\t\t\tfontWeight=\"semibold\"\r\n\t\t\t\t\t\tas=\"h4\"\r\n\t\t\t\t\t\tlineHeight=\"tight\"\r\n\t\t\t\t\t\tisTruncated\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{props.data.comment}\r\n\t\t\t\t\t</Box>\r\n\r\n\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t<Text>Author: {props.data.name}</Text>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Box>\r\n\t\t\t</Box>\r\n\t\t</Center>\r\n\t);\r\n}\r\n\r\nexport default Comment;\r\n","import React from 'react';\r\nimport {\r\n\tStack,\r\n\tText,\r\n\tTextarea,\r\n\tInput,\r\n\tButton,\r\n\tBox,\r\n\tCenter,\r\n} from '@chakra-ui/react';\r\nimport Comment from './comment';\r\nimport { getQuestionDetails, newComment } from '../../scripts/api';\r\n\r\nclass Question extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tquestion: '',\r\n\t\t\tsubject: '',\r\n\t\t\tname: '',\r\n\t\t\tpostid: '',\r\n\t\t\tcomments: [],\r\n\r\n\t\t\tcomment: '',\r\n\t\t\tcommentAuthor: '',\r\n\t\t};\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst id = new URLSearchParams(this.props.location.search).get('q');\r\n\t\tif (!id) return (window.location.href = '/404');\r\n\t\tconst { question, subject, name, comments } = await getQuestionDetails(\r\n\t\t\tid\r\n\t\t);\r\n\t\tthis.setState({\r\n\t\t\tquestion,\r\n\t\t\tsubject,\r\n\t\t\tname,\r\n\t\t\tcomments: comments === null ? [] : comments,\r\n\t\t\tpostid: id,\r\n\t\t});\r\n\t}\r\n\r\n\thandleChange(event) {\r\n\t\tswitch (event.target.id) {\r\n\t\t\tcase 'fname':\r\n\t\t\t\tthis.setState({ commentAuthor: event.target.value });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'comment':\r\n\t\t\t\tthis.setState({ comment: event.target.value });\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tasync handleSubmit(event) {\r\n\t\tevent.preventDefault();\r\n\t\tawait newComment(this.state);\r\n\t\t// this.setState({ comment: '', commentAuthor: '' });\r\n\t\twindow.location.reload();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<br />\r\n\t\t\t\t<Center>\r\n\t\t\t\t\t<Box borderWidth=\"1px\" borderRadius=\"lg\" width=\"40em\" p=\"6\">\r\n\t\t\t\t\t\t<Stack spacing={3}>\r\n\t\t\t\t\t\t\t<Text fontSize=\"3xl\">{this.state.subject}</Text>\r\n\t\t\t\t\t\t\t<Text fontSize=\"2xl\">{this.state.question}</Text>\r\n\t\t\t\t\t\t\t<Text fontSize=\"1xl\">\r\n\t\t\t\t\t\t\t\tAuthor: {this.state.name}\r\n\t\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t</Stack>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Center>\r\n\t\t\t\t<br />\r\n\t\t\t\t<Text fontSize=\"2xl\">Comments</Text>\r\n\t\t\t\t<br />\r\n\t\t\t\t<Center>\r\n\t\t\t\t\t<Box borderWidth=\"1px\" borderRadius=\"lg\" width=\"40em\" p=\"6\">\r\n\t\t\t\t\t\t<Stack spacing=\"3\">\r\n\t\t\t\t\t\t\t{this.state.comments.map(comment => (\r\n\t\t\t\t\t\t\t\t<Comment key={comment._id} data={comment} />\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Stack>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Center>\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\t\t\t\t<Center>\r\n\t\t\t\t\t<Box borderWidth=\"1px\" borderRadius=\"lg\" width=\"35em\" p=\"6\">\r\n\t\t\t\t\t\t<form\r\n\t\t\t\t\t\t\tclassName=\"addQuestion\"\r\n\t\t\t\t\t\t\tonSubmit={this.handleSubmit}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\tName:\r\n\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\twidth=\"10em\"\r\n\t\t\t\t\t\t\t\t\theight=\"2em\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Name (optional)\"\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tid=\"fname\"\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.commentAuthor}\r\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\tAnswer:\r\n\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t<Textarea\r\n\t\t\t\t\t\t\t\t\twidth=\"30em\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Answer to add\"\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tid=\"comment\"\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.comment}\r\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t<Button type=\"submit\" colorScheme=\"blue\">\r\n\t\t\t\t\t\t\t\tAdd answer\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Center>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Question;\r\n","import React from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Main from './pages/Main';\nimport New from './pages/New';\nimport Questions from './pages/Question';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<ChakraProvider theme={theme}>\n\t\t\t\t<ColorModeSwitcher />\n\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={Main} />\n\t\t\t\t\t<Route exact path=\"/new\" component={New} />\n\t\t\t\t\t<Route path=\"/question\" component={Questions} />\n\t\t\t\t\t<Route exact path=\"/404\">\n\t\t\t\t\t\t<h1>404 not found</h1>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t<h1>404 not found</h1>\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</ChakraProvider>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://cra.link/PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://cra.link/PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It is the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<StrictMode>\n\t\t<ColorModeScript />\n\t\t<App />\n\t</StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}